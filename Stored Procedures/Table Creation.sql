CREATE TABLE TRANSACTION_TYPES(
	TRANSACTION_TYPE_ID INT,
	TRANSACTION_TYPE_NAME VARCHAR(100),
	PRIMARY KEY(TRANSACTION_TYPE_ID)
);

CREATE TABLE DECLINE_REASONS(
	DECLINE_REASON_ID INT,
	DECLINE_REASON VARCHAR(100),
	PRIMARY KEY(DECLINE_REASON_ID)
);

CREATE TABLE AUTHENTICATION_TYPES(
	AUTHENTICATION_TYPE_ID INT,
	AUTHENTICATION_MECHANISM VARCHAR(100),
	IMPLEMENTATION_DATE DATE,
	PRIMARY KEY(AUTHENTICATION_TYPE_ID)
);

-- CONSTRAINT: IMPLEMENTATION_DATE should be less than the current date

CREATE TABLE CARDHOLDER_DETAILS(
	CARDHOLDER_ID INT,
	CARDHOLDER_NAME VARCHAR(100),
	EMAIL VARCHAR(200),
	ZIP_CODE INT,
	PRIMARY KEY(CARDHOLDER_ID),
	UNIQUE(EMAIL)
);

CREATE TABLE COUNTRIES(
	COUNTRY_ID INT,
	COUNTRY VARCHAR(100),
	COUNTRY_RESTRICTIONS BOOLEAN,
	PRIMARY KEY(COUNTRY_ID)
);

CREATE TABLE MERCHANTS(
	MERCHANT_ID INT,
	MERCHANT_NAME VARCHAR(100),
	COUNTRY_ID INT NOT NULL,
	PRIMARY KEY(MERCHANT_ID),
	FOREIGN KEY(COUNTRY_ID) REFERENCES COUNTRIES
);
CREATE TABLE ISSUERS(
	ISSUER_ID INT,
	ISSUER_NAME VARCHAR(100),
	SWIFT_CODE VARCHAR(100),
	ISSUER_RESTRICTIONS BOOLEAN,
	COUNTRY_ID INT NOT NULL,
	PRIMARY KEY(ISSUER_ID),
	UNIQUE(SWIFT_CODE),
	FOREIGN KEY(COUNTRY_ID) REFERENCES COUNTRIES
);

CREATE TABLE CARDS(
	CARD_NUMBER INT,
	CARDHOLDER_ID INT,
	CVV INT NOT NULL,
	CARD_LIMIT INT,
	VINTAGE_DATE DATE,
	EXPIRY_DATE DATE,
	AVAILABLE_FUNDS FLOAT,
	ISSUER_ID INT NOT NULL,
	PRIMARY KEY(CARD_NUMBER, CARDHOLDER_ID),
	FOREIGN KEY(CARDHOLDER_ID) REFERENCES CARDHOLDER_DETAILS ON DELETE CASCADE,
	FOREIGN KEY(ISSUER_ID) REFERENCES ISSUERS
);

-- CONSTRAINT: VINTAGE_DATE should be lesser than EXPIRY_DATE
-- CONSTRAINT: CARD_LIMIT should be greater than 0
-- CONSTRAINT: VINTAGE_DATE should be lesser than the Present Date

CREATE TABLE DIAMOND_CARDS(
	CARD_NUMBER INT,
	CARDHOLDER_ID INT,
	LOUNGE_ACCESS BOOLEAN,
	VALET_PARKING BOOLEAN,
	GOLF_BENEFITS BOOLEAN,
	PRIMARY KEY(CARD_NUMBER, CARDHOLDER_ID),
	FOREIGN KEY(CARD_NUMBER, CARDHOLDER_ID) REFERENCES CARDS
	ON DELETE CASCADE
);

CREATE TABLE TITANIUM_CARDS(
	CARD_NUMBER INT,
	CARDHOLDER_ID INT,
	LOUNGE_ACCESS BOOLEAN,
	CINEMA_DISCOUNT BOOLEAN,
	ONLINE_SHOPPING_DISCOUNT BOOLEAN,
	PRIMARY KEY(CARD_NUMBER, CARDHOLDER_ID),
	FOREIGN KEY(CARD_NUMBER, CARDHOLDER_ID) REFERENCES CARDS
	ON DELETE CASCADE
);

CREATE TABLE PLATINUM_CARDS(
	CARD_NUMBER INT,
	CARDHOLDER_ID INT,
	CINEMA_DISCOUNT BOOLEAN,
	ONLINE_SHOPPING_DISCOUNT BOOLEAN,
	PRIMARY KEY(CARD_NUMBER, CARDHOLDER_ID),
	FOREIGN KEY(CARD_NUMBER, CARDHOLDER_ID) REFERENCES CARDS
	ON DELETE CASCADE
);

CREATE TABLE TRANSACTIONS(
	TRANSACTION_ID INT,
	AMOUNT REAL,
	CURRENCY VARCHAR(100),
	FRAUD BOOLEAN,
	TRANSACTION_STATUS BOOLEAN,
	TRANSACTION_TIMESTAMP TIMESTAMP,
	MERCHANT_ID INT NOT NULL,
	ACQUIRER_ID INT NOT NULL,
	TRANSACTION_TYPE_ID INT NOT NULL,
	DECLINE_REASON_ID INT,
	AUTHENTICATION_TYPE_ID INT,
	CARD_NUMBER INT NOT NULL,
	CARDHOLDER_ID INT NOT NULL,
	PRIMARY KEY(TRANSACTION_ID),
	FOREIGN KEY(MERCHANT_ID) REFERENCES MERCHANTS,
	FOREIGN KEY(ISSUER_ID) REFERENCES ISSUERS(ISSUER_ID),
	FOREIGN KEY(TRANSACTION_TYPE_ID) REFERENCES TRANSACTION_TYPES,
	FOREIGN KEY(DECLINE_REASON_ID) REFERENCES DECLINE_REASONS,
	FOREIGN KEY(AUTHENTICATION_TYPE_ID) REFERENCES AUTHENTICATION_TYPES,
	FOREIGN KEY(CARD_NUMBER, CARDHOLDER_ID) REFERENCES CARDS
);

-- CONSTRAINT: AMOUNT is always positive (we ignore cashback/refunds)
-- CONSTRAINT: AMOUNT cannot be greater than CARD_LIMIT

CREATE TABLE INTERNETFLIX_STORED_CARD_DATA(
	STORED_CARD_ID INT,
	CARD_TOKEN VARCHAR(100),
	MERCHANT_ID INT NOT NULL,
	PRIMARY KEY(STORED_CARD_ID),
	FOREIGN KEY(MERCHANT_ID) REFERENCES MERCHANTS,
	UNIQUE(CARD_TOKEN)
);

CREATE TABLE INTERNETFLIX_CUSTOMER_DATA(
	CUSTOMER_ID INT,
	CUSTOMER_NAME VARCHAR(100),
	CUSTOMER_ADDRESS VARCHAR(100),
	STORED_CARD_ID INT,
	PRIMARY KEY(CUSTOMER_ID),
	FOREIGN KEY(STORED_CARD_ID) REFERENCES INTERNETFLIX_STORED_CARD_DATA
);

-- The following are the assumptions in design -

-- 1) There are a limited number of Card IDs (since the last 4 digits are checksum and the first 6 represent the Bank Identification Number - BIN, the remaining number of cards are only 10^6 which is a million cards only) and they can be duplicated for a given issuer, so we need them to be uniquely mapped with an individual
-- 2) Every card can belong to only one issuer
-- 3) Every transaction can have only one mode of payment (it can either be Card-on-file/ recurring payment/ contactless
-- 4) Every transaction is either declined or authenticated (they are complementary sets)
-- 5) Every transaction happens at a single merchant
-- 6) Every transaction has exactly one acquirer bank (belongs to the merchant)
-- 7) Each bank (issuer) is located in exactly one country (for the sake of simplicity)
-- 8) Every merchant is located in exactly one country (for the sake of simplicity)
-- 9) Every card is associated with exactly one issuing bank
-- 10) Each transaction can have exactly one acquiring bank
-- 11) Each card token belongs to exactly one merchant
-- 12) Each card token belongs to exactly one card
-- 13) The Internetflix Stored Card Data entity set exclusively contains the information of customers who have granted permission for their data to be stored, so not every customer has their card details stored (each customer has atmost one card token)
-- 14) Every cardholder has to have a unique email in the primary Cardholder Details table as we allow the same cardholder to have multiple cards from multiple issuers as well with the same cardholder entity